name: Release

on:
  push:
    tags:
      - 'v*.*.*'        # Stable releases (v1.0.9)
      - 'v*.*.*-*'      # Pre-releases (v1.0.9-beta.1, v1.0.9-rc.1)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.9 for stable, 1.0.9-beta.1 for beta)'
        required: true
        default: '1.0.9-beta.1'
      branch:
        description: 'Branch to release from'
        required: true
        default: 'devel'
        type: choice
        options:
          - main
          - devel

permissions:
  contents: write

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'SeeThroughWindows/SeeThroughWindows.csproj'
  SOLUTION_PATH: 'SeeThroughWindows.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  release:
    name: Create Release
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get version and determine release type
      id: get-version
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
          $branch = "${{ github.event.inputs.branch }}"
        } else {
          $version = "${{ github.ref_name }}" -replace '^v', ''
          # Determine branch from tag pattern
          if ($version -match '-') {
            $branch = "devel"
          } else {
            $branch = "main"
          }
        }

        $tag = "v$version"
        $isPrerelease = $version -match '-'

        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "tag=$tag" >> $env:GITHUB_OUTPUT
        echo "branch=$branch" >> $env:GITHUB_OUTPUT
        echo "is-prerelease=$isPrerelease" >> $env:GITHUB_OUTPUT

        echo "Version: $version"
        echo "Tag: $tag"
        echo "Branch: $branch"
        echo "Is Prerelease: $isPrerelease"

    - name: Validate branch for release type
      shell: pwsh
      run: |
        $version = "${{ steps.get-version.outputs.version }}"
        $branch = "${{ steps.get-version.outputs.branch }}"
        $isPrerelease = "${{ steps.get-version.outputs.is-prerelease }}" -eq "true"

        if ($isPrerelease -and $branch -eq "main") {
          Write-Error "‚ùå Pre-release versions (containing '-') should not be released from main branch"
          exit 1
        }

        if (-not $isPrerelease -and $branch -eq "devel") {
          Write-Warning "‚ö†Ô∏è  Stable versions are typically released from main branch, but proceeding from devel"
        }

        echo "‚úÖ Branch validation passed"

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal
      continue-on-error: true

    - name: Publish application (Framework-dependent)
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --output "publish/framework-dependent" `
          --self-contained false `
          --verbosity normal

    - name: Publish application (Self-contained)
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --output "publish/self-contained" `
          --self-contained true `
          --runtime win-x64 `
          --verbosity normal

    - name: Create release packages
      shell: pwsh
      run: |
        $version = "${{ steps.get-version.outputs.version }}"
        $isPrerelease = "${{ steps.get-version.outputs.is-prerelease }}" -eq "true"

        # Add prerelease suffix to package names if needed
        $suffix = if ($isPrerelease) { "-$($version -replace '.*-', '')" } else { "" }

        # Create framework-dependent package
        $fdDir = "SeeThroughWindows-v$version-framework-dependent"
        New-Item -ItemType Directory -Path $fdDir -Force
        Copy-Item -Path "publish/framework-dependent/*" -Destination $fdDir -Recurse -Force
        if (Test-Path "README.md") { Copy-Item "README.md" $fdDir }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" $fdDir }
        Compress-Archive -Path $fdDir -DestinationPath "$fdDir.zip" -Force

        # Create self-contained package
        $scDir = "SeeThroughWindows-v$version-self-contained-win-x64"
        New-Item -ItemType Directory -Path $scDir -Force
        Copy-Item -Path "publish/self-contained/*" -Destination $scDir -Recurse -Force
        if (Test-Path "README.md") { Copy-Item "README.md" $scDir }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" $scDir }
        Compress-Archive -Path $scDir -DestinationPath "$scDir.zip" -Force

        # Output package info
        echo "fd-package=$fdDir.zip" >> $env:GITHUB_OUTPUT
        echo "sc-package=$scDir.zip" >> $env:GITHUB_OUTPUT

        echo "Created packages:"
        Get-Item "*.zip" | ForEach-Object {
          echo "- $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
        }
      id: create-packages

    - name: Generate changelog
      id: changelog
      shell: pwsh
      run: |
        $version = "${{ steps.get-version.outputs.version }}"
        $branch = "${{ steps.get-version.outputs.branch }}"
        $isPrerelease = "${{ steps.get-version.outputs.is-prerelease }}" -eq "true"

        # Try to get commits since last tag
        $lastTag = git describe --tags --abbrev=0 HEAD^ 2>$null
        if ($lastTag) {
          $commits = git log --pretty=format:"- %s (%h)" "$lastTag..HEAD"
        } else {
          $commits = git log --pretty=format:"- %s (%h)" -10
        }

        # Build changelog with proper line breaks
        $changelogLines = @()

        if ($isPrerelease) {
          $changelogLines += "## üß™ Beta Release - What's New"
          $changelogLines += ""
          $changelogLines += "‚ö†Ô∏è **This is a beta release** - Please test thoroughly before using in production!"
          $changelogLines += ""
        } else {
          $changelogLines += "## ‚ú® What's Changed"
          $changelogLines += ""
        }

        if ($commits) {
          $commits -split "`n" | ForEach-Object {
            if ($_.Trim()) {
              $changelogLines += $_.Trim()
            }
          }
        } else {
          if ($isPrerelease) {
            $changelogLines += "- Beta release with latest development changes"
          } else {
            $changelogLines += "- Initial release"
          }
        }

        $changelogLines += ""
        $changelogLines += "## üì¶ Downloads"
        $changelogLines += ""
        $changelogLines += "- **Framework-dependent**: Requires .NET 9 runtime to be installed"
        $changelogLines += "- **Self-contained**: Includes .NET 9 runtime (larger file size)"
        $changelogLines += ""

        if ($isPrerelease) {
          $changelogLines += "## üîÑ Beta Testing"
          $changelogLines += ""
          $changelogLines += "This beta release is built from the ``$branch`` branch and contains the latest features and improvements."
          $changelogLines += "Please report any issues you encounter!"
          $changelogLines += ""
        }

        if ($lastTag) {
          $changelogLines += "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$lastTag...${{ steps.get-version.outputs.tag }}"
        } else {
          $changelogLines += "**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.get-version.outputs.tag }}"
        }

        # Join with proper newlines and save to file
        $changelog = $changelogLines -join "`n"
        $changelog | Out-File -FilePath "changelog.md" -Encoding UTF8 -NoNewline

        # Use proper multiline output format for GitHub Actions
        $delimiter = "CHANGELOG_EOF_$(Get-Random)"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "changelog<<$delimiter"
        Add-Content -Path $env:GITHUB_OUTPUT -Value $changelog
        Add-Content -Path $env:GITHUB_OUTPUT -Value $delimiter

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get-version.outputs.tag }}
        name: ${{ steps.get-version.outputs.is-prerelease == 'true' && format('SeeThroughWindows v{0} (Beta)', steps.get-version.outputs.version) || format('SeeThroughWindows v{0}', steps.get-version.outputs.version) }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ steps.get-version.outputs.is-prerelease }}
        files: |
          ${{ steps.create-packages.outputs.fd-package }}
          ${{ steps.create-packages.outputs.sc-package }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
